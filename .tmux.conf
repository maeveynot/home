set -g mode-keys emacs

# TODO: only turn on mouse if version >= 3.0 (or maybe we can do
# something more intelligent)

set -g mouse on
set -g set-clipboard external

# Copy to primary selection, not clipboard

set-option -ga terminal-overrides ',xterm*:Ms=\E]52;p;%p2%s\007'

# Fix meta key (if ^[ and the key are sent more than ~60Hz apart, I have
# bigger problems) and overly long pane display

set -g escape-time 16
set -g display-panes-time 500

# Come on, we've had enough memory to not lose scrollback since the 90's

set -g history-limit 32768

# The 0 key is to the right of 9 (well... for me, anyway), so make it
# window 10 and start auto-numbering windows at 1.

set -g base-index 1
bind-key 0 select-window -t :10

# I use C-b for cursor movement constantly (not just in Readline; I run
# Emacs in a terminal), so having to double it would be very annoying. I
# rarely ever need to send a ^Z for job control (because I can open a
# new pane), so change prefix to C-z. I find this comfortable because I
# use Dvorak and ctrl:swapcaps; YMMV.

set -g prefix C-z

# C-b now wouldn't make make sense to send a literal ^Z, but rather than
# just changing send-prefix to repeating C-z (we're going to want that
# in the next stanza), release Control before pressing z. I don't really
# use `suspend-client`, which this shadows, but it's conceptually similar
# so give it the Shift version (which is free).

unbind-key C-b
bind-key z send-prefix
bind-key Z suspend-client

# I am old and grumpy and want basic window switching to be like it was
# in screen(1): double up the prefix key to go back and forth between
# windows, Space to cycle through them all.

bind-key C-z last-window
bind-key Space next-window

# With the special case of the prefix/suspend key out of the way, we're
# going to start binding any C-<key> equivalents for <key> to the same
# thing, so that I don't have to release Control in the middle.

bind-key C-Space next-window

# I like the default bindings for d, n, and p (all mnemonic), and o
# (It's Emacs-like, "other pane", I suppose), so add the equivalents for
# them.

bind-key C-d detach-client
bind-key C-n next-window
bind-key C-p previous-window
bind-key C-o select-pane -t :.+

# We took Space above, so we need something else to layout cycle; but we
# since we moved last-window there, l (which is a mnemonic assuming and
# for that u say "ðŸŽœ layout, next ðŸŽœ" and not "next layout") is available.

bind-key l next-layout
bind-key C-l next-layout

# I dislike changing modifiers from Control to Shift in the middle of a
# binding even more than changing from Control to nothing, so choose
# some more convenient (and also mnemonic... a theme is developing)
# splitting keys. These are already free. Make them start in the working
# directory of the current pane, too.

unbind-key '"'
unbind-key %
bind-key h split-window -h -c "#{pane_current_path}"
bind-key C-h split-window -h -c "#{pane_current_path}"
bind-key v split-window -v -c "#{pane_current_path}"
bind-key C-v split-window -v -c "#{pane_current_path}"

# Do the same with initial working directory thing for new-window. That
# one could use an infrequent "no, really go back $HOME" variant though.

bind-key c new-window -c "#{pane_current_path}"
bind-key C-c new-window -c "#{pane_current_path}"
bind-key C new-window

# We unbound C-b earlier... in Emacs that's a buffer menu, so do
# something similar. -s is the only option I use, so I don't mind losing
# the other ones.

bind-key b choose-tree -s
bind-key C-b choose-tree -s

# This frees up w, which is satisfyingly Emacs-y for entering copy mode.
# Include my weird alternate scrolling keys there too.

bind-key w copy-mode
bind-key C-w copy-mode

bind-key -T copy-mode M-n send-keys -X page-down
bind-key -T copy-mode M-p send-keys -X page-up

# Let's put kill on something more Emacs-y too.

bind-key k confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind-key C-k confirm-before -p "kill-pane #P? (y/n)" kill-pane

# That frees up x for switching to mark (another theme developing...).
# Setting the mark is a bit trickier, though, as we no longer don't have
# Space available. @ seems good enough.

bind-key x select-pane -t :. # not quite right yet
bind-key C-x select-pane -t :.
bind-key @ select-pane -m

# New bindings that don't correspond to or shadow default ones.

bind-key M-r move-window -r \; display-message "all windows renumbered"
bind-key M-s set-option synchronize-panes \; display-message "synchronize turned #{?synchronize-panes,on,off}"

bind-key j command-prompt "join-pane -t ':%%'"
bind-key C-j command-prompt "join-pane -t ':%%'"

bind-key R refresh-client
bind-key r respawn-pane
bind-key C-r respawn-pane

# This shadows mark stuff but eh.

bind-key m command-prompt -p "man?" "split-window -h -l 80 'exec man %%'"
bind-key C-m command-prompt -p "man?" "split-window -h -l 80 'exec man %%'"

# Imitate the traditional paste and select-by-word-or-line stuff.
# MouseUp is for when you don't start a drag but just want that one word
# or line; it's redundant if MouseDragEnd also fires but it's harmless
# so don't bother checking.

bind-key -n MouseDown2Pane paste-buffer
bind-key -n DoubleClick1Pane select-pane \; copy-mode -M \; send-keys -X select-word
bind-key -n TripleClick1Pane select-pane \; copy-mode -M \; send-keys -X select-line
bind-key -T copy-mode MouseUp1Pane send-keys -X copy-selection-and-cancel

# Pasting won't actually refresh the buffer from the primary selection.
# There aren't yet separate events for getting a focus event and
# switching between panes, so we do it on both even though only the
# former is really necessary.

set -g focus-events on
set-hook -g pane-focus-in "refresh-client -l"

# To take advantage of Fitts' Law, make wheel work everywhere in the
# status line, not just over the window names.

bind-key -n WheelUpStatusDefault previous-window
bind-key -n WheelDownStatusDefault next-window
bind-key -n WheelUpStatusLeft previous-window
bind-key -n WheelDownStatusLeft next-window
bind-key -n WheelUpStatusRight previous-window
bind-key -n WheelDownStatusRight next-window

# In theory, being a top would be more like tabbed GUI applications, but
# it turns out that my window manager is not a bottom.

set -g status-position bottom

# Colors and display.

#set-window-option -g window-status-current-style bg=blue,fg=magenta,bold
set -g window-status-current-style fg=black,bg=blue

#set -g window-status-current-format '#I: #W#F '
#set -g window-status-format '#I: #W#F '
set -g pane-border-style bg=default,fg=cyan
set -g pane-active-border-style bg=default,fg=blue

set -g set-titles on
set -g set-titles-string "#T"

set -g status-style bg=colour68,fg=white,bold
set -g message-style bg=colour97,fg=colour251,bright
set -g status-right " #{pane_width}x#{pane_height}"

# This depends on my terminfo. Override in shell init if needed.

set -g default-terminal "tmux-truecolor"

# Don't create login shells in panes. Back in the 2010s on macOS, I
# needed this wrapper installed, or things like the pasteboard would not
# be accessible. Don't know if that's still true in 2020.

if-shell 'command -v reattach-to-user-namespace' \
    'set -g default-command "reattach-to-user-namespace $SHELL"' \
    'set -g default-command $SHELL'
