#!/bin/sh -e

ff_branches() {
    cur_branch="$(git symbolic-ref --short HEAD)"

    # Note that this function runs in a pipe, so that state set inside
    # the read loop can be used later in the function.
    while read -r branch; do
        # Quietly skip branches without an upstream.
        remote="$(git config --get "branch.${branch}.remote")" || continue
        merge="$(git config --get "branch.${branch}.merge")" || continue
        upstream="${remote}/${merge#refs/heads/}"

        # Skip branches where upstream was deleted. Instead of the
        # rev-parse error message, emit a checkout-like warning.
        if ! upstream_commit="$(git rev-parse "$upstream" 2>/dev/null)"; then
            echo "Branch ${branch} is based on '${upstream}', but the upstream is gone." 1>&2
            echo "  (use 'git branch --unset-upstream ${branch}' to fixup)" 1>&2
            continue
        fi

        if test "$upstream_commit" != "$(git rev-parse "$branch")"; then
            echo "Fast-forwarding ${branch}..."
            # Either of these can reject an non-ff update, which is what
            # we want.
            if test "$branch" = "$cur_branch"; then
                git merge --ff-only "$upstream" || any_branch_diverged=1
            else
                # The trick here is to "fetch" from the current repository. It
                # would be nice if we could hide the "From ." line since the
                # user doesn't need to care, but --quiet suppresses the
                # rejection details and a grep would eat the exit status.
                git fetch . "${upstream}:${branch}" || any_branch_diverged=1
            fi
            # TODO: delete any local branches that weren't merged into this
            # branch before but are now merged (and gracefully handle the
            # fact that that will fail on the currently checked out branch).
        fi
    done

    if test -n "$any_branch_diverged"; then
        echo "Some branches could not be fast-forwarded; you will need to merge or rebase."
        return 1
    fi
}

git fetch "$@"
git for-each-ref --format='%(refname:short)' refs/heads | ff_branches
